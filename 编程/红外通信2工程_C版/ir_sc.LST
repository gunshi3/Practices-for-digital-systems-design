C51 COMPILER V9.51   IR_SC                                                                 08/20/2015 16:02:55 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE IR_SC
OBJECT MODULE PLACED IN ir_sc.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ir_sc.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "STC15F2K60S2.H"
   2          
   3          #define Check_Time 75         //按键消抖的周期
   4          #define Min_time 50           //按键识别被为按下时需检测到的最少次数
   5          
   6          /**********************
   7          引脚别名定义
   8          ***********************/
   9          sbit SEL0 = P2^0;               //位选信号
  10          sbit SEL1 = P2^1;               //位选信号
  11          sbit SEL2 = P2^2;               //位选信号
  12          sbit SEL3 = P2^3;               //数码管和LED的选择信号
  13          
  14          sbit P3_5 = P3^5;               //红外线发送引脚
  15          sbit P3_7 = P3^7;               //串口1发送引脚
  16          
  17          sbit KEY1 = P3^2;               //按键1  发送信号
  18          sbit KEY2 = P3^3;               //按键2  数据加1
  19          sbit KEY3 = P1^7;               //按键3  收发模式开关
  20          
  21          
  22          /**********************
  23          全局变量定义
  24          ***********************/
  25          int time = Check_Time;          //按键消抖周计数(一个周期检测Check_Time次)
  26          int key1_count = 0;             //周期中检测到KEY1=0的次数
  27          int key2_count = 0;             //周期中检测到KEY2=0的次数
  28          int key3_count = 0;             //周期中检测到KEY3=0的次数
  29          int key1_state = 1;             //KEY1状态：设置为0代表已按下，1代表未按下
  30          int key2_state = 1;             //KEY2状态：设置为0代表已按下，1代表未按下
  31          int key3_state = 1;             //KEY3状态：设置维0代表已按下，1代表未按下
  32          
  33          unsigned int number[] = {0, 0, 0, 0, 0, 0, 0, 0};       //数码管显示的数字
  34          
  35          int count = 1;                  //数码管显示的数量
  36          int show_flag;                  //扫描中显示的位
  37          int s_count = 0;                //已发送数据的个数
  38          int begin_recive = 0;           //接收开始标志
  39          int mybuf = 11;                   //数据接收缓冲
  40          
  41          unsigned char seg_sel[]={       //段选，显示0-f
  42                0x3f,0x06,0x5b,0x4f,
  43                0x66,0x6d,0x7d,0x07,
  44                0x7f,0x6f,0x77,0x7c,
  45                0x39,0x5e,0x79,0x71};
  46          
  47          /**********************
  48          函数声明(中断函数除外)
  49          ***********************/
  50          void TimerInit();     //定时器设置
  51          void UartInit();      //串口1设置
  52          void init();          //初始化，推挽，设置中断开关
  53          void weixuan(int);    //设置数码管位选
  54          void check_key();     //消抖检测以及按键操作(定时器0中断中调用)
  55          
C51 COMPILER V9.51   IR_SC                                                                 08/20/2015 16:02:55 PAGE 2   

  56          /********************************
  57           * 函数名：main
  58           * 描述  ：主函数
  59           * 输入  ：无
  60           * 输出  ：无
  61          ********************************/
  62          void main()
  63          {
  64   1        TimerInit();    //设置定时器
  65   1        UartInit();     //设置串口1
  66   1        init();         //初始化
  67   1        while(1);
  68   1      }
  69          
  70          /********************************
  71           * 函数名：UartInit
  72           * 描述  ：串口1的相关设置
  73           * 输入  ：无
  74           * 输出  ：无
  75          ********************************/
  76          void UartInit()   //设置方法见数据手册P621(串口1设置)和P498(定时器T1设置)
  77          { 
  78   1        PCON &= 0x7F;   //波特率不倍速，SMOD=0
  79   1        SCON = 0x50;    //串口1使用工作方式1，REN=1(允许串行接收)
  80   1        AUXR &= 0xFE;   //串口1选择定时器T1作为波特率发生器，S1ST2=0
  81   1        AUXR1 = 0x40;   //串口1在P3.6接收，在P3.7发送
  82   1        PS = 1;         //设置串口中断为最高优先级
  83   1      }
  84          
  85          /********************************
  86           * 函数名：TimerInit
  87           * 描述  ：定时器的相关设置
  88           * 输入  ：无
  89           * 输出  ：无
  90          ********************************/
  91          void TimerInit()  //设置方法见数据手册P498
  92          {
  93   1        AUXR |= 0x40;   //定时器T1为1T模式，速度是传统8051的12倍，不分频。
  94   1        TMOD &= 0x0F;   //清除T1模式位
  95   1        TMOD |= 0x20;   //设置T1模式位，使用8位自动重装模式
  96   1        TL1 = 0x70;     //设置初值
  97   1        TH1 = 0x70;     //设置T1重装值
  98   1        TR1 = 1;        //T1运行控制位置1，允许T1计数
  99   1        
 100   1        AUXR |= 0x80;   //定时器T0为1T模式，的速度是传统8051的12倍，不分频。
 101   1        TMOD &= 0xF0;   //清除T0模式位
 102   1        TMOD |= 0x02;   //设置T0模式位，使用8位自动重装模式
 103   1        TL0 = 0x70;     //设置初值
 104   1        TH0 = 0x70;     //设T0重装值
 105   1        TF0 = 0;        //T0溢出标志位清零
 106   1        TR0 = 1;        //T0运行控制位置1，允许T0计数
 107   1        
 108   1        //定时器T2用于显示和按键消抖，500us定时16位自动重装
 109   1        AUXR |= 0x04;   //定时器T2为1T模式
 110   1        T2L = 0x66;     //低位重装值
 111   1        T2H = 0xEA;     //高位重装值
 112   1        AUXR |= 0x10;   //定时器2开始计时
 113   1      }
 114          
 115          /********************************
 116           * 函数名：init
 117           * 描述  ：设置推挽，中断开关设置
C51 COMPILER V9.51   IR_SC                                                                 08/20/2015 16:02:55 PAGE 3   

 118           * 输入  ：无
 119           * 输出  ：无
 120          ********************************/
 121          void init()
 122          {
 123   1        //设置推挽输出
 124   1        P0M1 = 0x00;
 125   1        P0M0 = 0xff;
 126   1        P2M1 = 0x00;
 127   1        P2M0 = 0x08;
 128   1      
 129   1        SEL3 = 0;
 130   1        //中断开关设置，详见数据手册P458
 131   1        ET1 = 0;      //禁止T1中断
 132   1        ET0 = 1;      //打开定时器T0中断
 133   1        ES = 1;       //打开串口1中断
 134   1        IE2 = 0X04;   //打开定时器2中断
 135   1        EA = 1;       //打开总中断
 136   1      /*以上操作相当于：  
 137   1        IE = 0x92;    //打开总中断EA=1，打开串口1中断ES=1，打开定时器0中断ET0=1
 138   1      */
 139   1      }
 140          
 141          /********************************
 142           * 函数名：weixuan
 143           * 描述  ：数码管显示位的选择
 144           * 输入  ：需要显示的第x位
 145           * 输出  ：无
 146          ********************************/
 147          void weixuan(int x)
 148          {
 149   1        SEL0 = x%2;
 150   1        SEL1 = x%4/2;
 151   1        SEL2 = x/4;
 152   1      }
 153          
 154          /********************************
 155           * 函数名：check_key
 156           * 描述  ：消抖周期中一次按键的检测，以及检测Check_Time次后的操作（需要多次重复调用）
 157           * 输入  ：无
 158           * 输出  ：无
 159          ********************************/
 160          void check_key()
 161          {
 162   1        time--;
 163   1        if(KEY1==0)
 164   1          key1_count++;
 165   1        if(KEY2==0)
 166   1          key2_count++;
 167   1        if(KEY3==0)
 168   1          key3_count++;
 169   1        
 170   1        if(time <= 0)                 //一个周期结束
 171   1        {
 172   2          if(key1_count>=Min_time)    //判断KEY1被检测为按下的次数是否大于按键识别被为按下需检测到的最少次数
 173   2          {
 174   3            if(key1_state==1)         //判断是否已经被按下
 175   3            {
 176   4                REN = 0;              //
 177   4                SBUF = 0xca;          //发出发送标志0xca，触发串口中断进行数据发送
 178   4      
 179   4                key1_state = 0;       //状态改变为已经被按下
C51 COMPILER V9.51   IR_SC                                                                 08/20/2015 16:02:55 PAGE 4   

 180   4            }
 181   3          }
 182   2          else
 183   2            key1_state = 1;           //状态改变为未被按下
 184   2          
 185   2          if(key2_count>=Min_time)
 186   2          {
 187   3            if(key2_state==1)
 188   3            { 
 189   4              number[8-count]++;                //数据+1
 190   4              number[8-count] %= 16;
 191   4              key2_state = 0;
 192   4            }
 193   3          }
 194   2          else
 195   2            key2_state = 1;
 196   2          
 197   2          if(key3_count>=Min_time)
 198   2          {
 199   3            if(key3_state==1)
 200   3            {
 201   4              count++;                        //显示个数+1
 202   4              if(count == 9)
 203   4                count = 1;
 204   4              key3_state = 0;
 205   4            }
 206   3          }
 207   2          else
 208   2            key3_state = 1;
 209   2          
 210   2          time = Check_Time;
 211   2          key1_count = 0;
 212   2          key2_count = 0;
 213   2          key3_count = 0;
 214   2        }
 215   1      
 216   1      }
 217          
 218          
 219          /********************************
 220           * 函数名：Time0
 221           * 描述  ：定时器0中断的操作
 222           * 输入  ：无
 223           * 输出  ：无
 224          ********************************/
 225          void Time0() interrupt 1
 226          {
 227   1        if(P3_7==0)     //P3_5根据P3_7的信号产生脉冲
 228   1        {
 229   2          P3_5 = ~P3_5;
 230   2        }
 231   1        else            //如果P3.7=1则P3.5输出0
 232   1          P3_5 = 0;
 233   1      }
 234          
 235          /********************************
 236           * 函数名：URAT1
 237           * 描述  ：串口1中断的操作。发送完毕TI自动置1，产生中断; 接收完毕RI值1，产生中断
 238           * 输入  ：无
 239           * 输出  ：无
 240          ********************************/
 241          void URAT1() interrupt 4
C51 COMPILER V9.51   IR_SC                                                                 08/20/2015 16:02:55 PAGE 5   

 242          {
 243   1        if(TI)                        //判断发送中断
 244   1        {
 245   2          TI = 0;                     //发送中断请求标志位清0
 246   2          if(s_count < count)         //发送个数小于显示个数
 247   2          {
 248   3            SBUF = number[7-s_count]; //继续发送
 249   3            s_count ++;
 250   3          }
 251   2          else
 252   2          {
 253   3            if(s_count == count)      //发送个数等于显示个数
 254   3            { 
 255   4              s_count ++;
 256   4              SBUF = 0x55;            //发送结束标志
 257   4            }
 258   3            else                      //发送完毕后，已发送个数清零，打开串口接收
 259   3            {
 260   4              s_count = 0;
 261   4              REN = 1;                  
 262   4            }
 263   3          }
 264   2        }
 265   1        
 266   1        if(RI)                        //判断是否接收中断
 267   1        {
 268   2          RI = 0;                     //接收中断请求标志位清0
 269   2          mybuf = SBUF;               //把这次接收到的数据存入自定义的缓存中
 270   2          
 271   2          if(mybuf == 0x55)           //判断接收结束
 272   2          {
 273   3            begin_recive = 0;         //接收结束
 274   3            IE2 = 0x04;               //打开定时2中断
 275   3          }
 276   2          if(begin_recive)            //如果开始了
 277   2          { 
 278   3            number[7-count] = SBUF;   //接收数据
 279   3            count++;                  //显示个数+1
 280   3          }
 281   2          if(mybuf == 0xca)           //判断开始接收标志
 282   2          {
 283   3            begin_recive = 1;         //接收开始
 284   3            IE2 = 0x00;               //关闭定时器T2中断，停止按键检测与数码管扫描
 285   3            P0 = 0;             
 286   3            count = 0;                //显示个数清零
 287   3          }
 288   2        }
 289   1      }
 290          
 291          /********************************
 292           * 函数名：Timer2
 293           * 描述  ：定时器2中断的操作。用于显示数码管和LED灯以及按键消抖
 294           * 输入  ：无
 295           * 输出  ：无
 296          ********************************/
 297          void Timer2() interrupt 12
 298          {
 299   1        
 300   1        P0 = 0;                 //P0清零
 301   1        show_flag = (show_flag+1)%count;
 302   1        weixuan(7-show_flag);             //选择数码管的第七位
 303   1        P0 = seg_sel[number[7-show_flag]];    //设置数码管显示内容
C51 COMPILER V9.51   IR_SC                                                                 08/20/2015 16:02:55 PAGE 6   

 304   1      
 305   1        check_key();              //按键消抖检测
 306   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    688    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     56    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
