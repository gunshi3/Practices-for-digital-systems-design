C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN RC522.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE RC522.C LARGE RTX51 BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <intrins.h>
   2          #include "STC15F2K60S2.H"
   3          #include "mfrc522.h"
   4          #include "main.h"
   5          #define MAXRLEN 18
   6          void Sent_Byte(unsigned char Sdata);
   7                  
   8          void delay_us(unsigned int nus)
   9          {
  10   1              unsigned int i;
  11   1              for(i=0;i<nus;i++)
  12   1              {
  13   2                      _nop_();
  14   2                      _nop_();
  15   2                      _nop_();
  16   2              }
  17   1      }
  18          /////////////////////////////////////////////////////////////////////
  19          //功    能：寻卡
  20          //参数说明: req_code[IN]:寻卡方式
  21          //                0x52 = 寻感应区内所有符合14443A标准的卡
  22          //                0x26 = 寻未进入休眠状态的卡
  23          //          pTagType[OUT]：卡片类型代码
  24          //                0x4400 = Mifare_UltraLight
  25          //                0x0400 = Mifare_One(S50)
  26          //                0x0200 = Mifare_One(S70)
  27          //                0x0800 = Mifare_Pro(X)
  28          //                0x4403 = Mifare_DESFire
  29          //返    回: 成功返回MI_OK
  30          /////////////////////////////////////////////////////////////////////
  31          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  32          {
  33   1         char status;  
  34   1         unsigned int  unLen;
  35   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  36   1      
  37   1         ClearBitMask(Status2Reg,0x08);
  38   1         WriteRawRC(BitFramingReg,0x07);
  39   1         SetBitMask(TxControlReg,0x03);
  40   1       
  41   1         ucComMF522Buf[0] = req_code;
  42   1      
  43   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  44   1         
  45   1         if ((status == MI_OK) && (unLen == 0x10))
  46   1         {    
  47   2             *pTagType     = ucComMF522Buf[0];
  48   2             *(pTagType+1) = ucComMF522Buf[1];
  49   2         }
  50   1         else
  51   1         {   status = MI_ERR;   }
  52   1         
  53   1         return status;
  54   1      }
  55          
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 2   

  56          /////////////////////////////////////////////////////////////////////
  57          //功    能：防冲撞
  58          //参数说明: pSnr[OUT]:卡片序列号，4字节
  59          //返    回: 成功返回MI_OK
  60          /////////////////////////////////////////////////////////////////////  
  61          char PcdAnticoll(unsigned char *pSnr)
  62          {
  63   1          char status;
  64   1          unsigned char i,snr_check=0;
  65   1          unsigned int  unLen;
  66   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  67   1          
  68   1      
  69   1          ClearBitMask(Status2Reg,0x08);
  70   1          WriteRawRC(BitFramingReg,0x00);
  71   1          ClearBitMask(CollReg,0x80);
  72   1       
  73   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  74   1          ucComMF522Buf[1] = 0x20;
  75   1      
  76   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  77   1      
  78   1          if (status == MI_OK)
  79   1          {
  80   2               for (i=0; i<4; i++)
  81   2               {   
  82   3                   *(pSnr+i)  = ucComMF522Buf[i];
  83   3                   snr_check ^= ucComMF522Buf[i];
  84   3               }
  85   2               if (snr_check != ucComMF522Buf[i])
  86   2               {   status = MI_ERR;    }
  87   2          }
  88   1          
  89   1          SetBitMask(CollReg,0x80);
  90   1          return status;
  91   1      }
  92          
  93          /////////////////////////////////////////////////////////////////////
  94          //功    能：选定卡片
  95          //参数说明: pSnr[IN]:卡片序列号，4字节
  96          //返    回: 成功返回MI_OK
  97          /////////////////////////////////////////////////////////////////////
  98          char PcdSelect(unsigned char *pSnr)
  99          {
 100   1          char status;
 101   1          unsigned char i;
 102   1          unsigned int  unLen;
 103   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 104   1          
 105   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
 106   1          ucComMF522Buf[1] = 0x70;
 107   1          ucComMF522Buf[6] = 0;
 108   1          for (i=0; i<4; i++)
 109   1          {
 110   2              ucComMF522Buf[i+2] = *(pSnr+i);
 111   2              ucComMF522Buf[6]  ^= *(pSnr+i);
 112   2          }
 113   1          CalulateCRC(ucComMF522Buf,7,&ucComMF522Buf[7]);
 114   1        
 115   1          ClearBitMask(Status2Reg,0x08);
 116   1      
 117   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,9,ucComMF522Buf,&unLen);
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 3   

 118   1          
 119   1          if ((status == MI_OK) && (unLen == 0x18))
 120   1          {   status = MI_OK;  }
 121   1          else
 122   1          {   status = MI_ERR;    }
 123   1      
 124   1          return status;
 125   1      }
 126          
 127          /////////////////////////////////////////////////////////////////////
 128          //功    能：验证卡片密码
 129          //参数说明: auth_mode[IN]: 密码验证模式
 130          //                 0x60 = 验证A密钥
 131          //                 0x61 = 验证B密钥 
 132          //          addr[IN]：块地址
 133          //          pKey[IN]：密码    初始值全为0xff 
 134          //          pSnr[IN]：卡片序列号，4字节
 135          //返    回: 成功返回MI_OK
 136          /////////////////////////////////////////////////////////////////////               
 137          char PcdAuthState(unsigned char auth_mode,unsigned char addr,unsigned char *pKey,unsigned char *pSnr)
 138          {
 139   1          char status;
 140   1          unsigned int  unLen;
 141   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 142   1      
 143   1          ucComMF522Buf[0] = auth_mode;
 144   1          ucComMF522Buf[1] = addr;
 145   1          for (i=0; i<6; i++)
 146   1          {    ucComMF522Buf[i+2] = *(pKey+i);   }
 147   1          for (i=0; i<6; i++)
 148   1          {    ucComMF522Buf[i+8] = *(pSnr+i);   }
 149   1          
 150   1          status = PcdComMF522(PCD_AUTHENT,ucComMF522Buf,12,ucComMF522Buf,&unLen);
 151   1          if ((status != MI_OK) || (!(ReadRawRC(Status2Reg) & 0x08)))
 152   1          {   status = MI_ERR;   }   
 153   1          return status;
 154   1      }
 155          
 156          /////////////////////////////////////////////////////////////////////
 157          //功    能：读取M1卡一块数据
 158          //参数说明: addr[IN]：块地址
 159          //          pData[OUT]：读出的数据，16字节
 160          //返    回: 成功返回MI_OK
 161          ///////////////////////////////////////////////////////////////////// 
 162          char PcdRead(unsigned char addr,unsigned char *pData)
 163          {
 164   1          char status;
 165   1          unsigned int  unLen;
 166   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 167   1      
 168   1          ucComMF522Buf[0] = PICC_READ;
 169   1          ucComMF522Buf[1] = addr;
 170   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 171   1         
 172   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 173   1          if ((status == MI_OK) && (unLen == 0x90))
 174   1          {
 175   2              for (i=0; i<16; i++)
 176   2              {    *(pData+i) = ucComMF522Buf[i];   }
 177   2          }
 178   1          else
 179   1          {   status = MI_ERR;   }
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 4   

 180   1          
 181   1          return status;
 182   1      }
 183          
 184          /////////////////////////////////////////////////////////////////////
 185          //功    能：写数据到M1卡一块
 186          //参数说明: addr[IN]：块地址
 187          //          pData[IN]：写入的数据，16字节
 188          //返    回: 成功返回MI_OK
 189          /////////////////////////////////////////////////////////////////////                  
 190          char PcdWrite(unsigned char addr,unsigned char *pData)
 191          {
 192   1          char status;
 193   1          unsigned int  unLen;
 194   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 195   1          
 196   1          ucComMF522Buf[0] = PICC_WRITE;
 197   1          ucComMF522Buf[1] = addr;
 198   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 199   1       
 200   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 201   1      
 202   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 203   1          {   status = MI_ERR;   }
 204   1              
 205   1          if (status == MI_OK)
 206   1          {
 207   2              //memcpy(ucComMF522Buf, pData, 16);
 208   2              for (i=0; i<16; i++)
 209   2              {    ucComMF522Buf[i] = *(pData+i);   }
 210   2              CalulateCRC(ucComMF522Buf,16,&ucComMF522Buf[16]);
 211   2      
 212   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,18,ucComMF522Buf,&unLen);
 213   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 214   2              {   status = MI_ERR;   }
 215   2          }
 216   1          
 217   1          return status;
 218   1      }
 219          /////////////////////////////////////////////////////////////////////
 220          //功    能：扣款和充值
 221          //参数说明: dd_mode[IN]：命令字
 222          //               0xC0 = 扣款
 223          //               0xC1 = 充值
 224          //          addr[IN]：钱包地址
 225          //          pValue[IN]：4字节增(减)值，低位在前
 226          //返    回: 成功返回MI_OK
 227          /////////////////////////////////////////////////////////////////////                 
 228          char PcdValue(unsigned char dd_mode,unsigned char addr,unsigned char *pValue)
 229          {
 230   1          char status;
 231   1          unsigned int  unLen;
 232   1          unsigned char i,ucComMF522Buf[MAXRLEN]; 
 233   1          
 234   1          ucComMF522Buf[0] = dd_mode;
 235   1          ucComMF522Buf[1] = addr;
 236   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 237   1       
 238   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 239   1      
 240   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 241   1          {   status = MI_ERR;   }
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 5   

 242   1              
 243   1          if (status == MI_OK)
 244   1          {
 245   2             // memcpy(ucComMF522Buf, pValue, 4);
 246   2              for (i=0; i<16; i++)
 247   2              {    ucComMF522Buf[i] = *(pValue+i);   }
 248   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 249   2              unLen = 0;
 250   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 251   2              if (status != MI_ERR)
 252   2              {    status = MI_OK;    }
 253   2          }
 254   1          
 255   1          if (status == MI_OK)
 256   1          {
 257   2              ucComMF522Buf[0] = PICC_TRANSFER;
 258   2              ucComMF522Buf[1] = addr;
 259   2              CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]); 
 260   2         
 261   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 262   2      
 263   2              if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 264   2              {   status = MI_ERR;   }
 265   2          }
 266   1          return status;
 267   1      }
 268          
 269          /////////////////////////////////////////////////////////////////////
 270          //功    能：备份钱包
 271          //参数说明: sourceaddr[IN]：源地址
 272          //          goaladdr[IN]：目标地址
 273          //返    回: 成功返回MI_OK
 274          /////////////////////////////////////////////////////////////////////
 275          char PcdBakValue(unsigned char sourceaddr, unsigned char goaladdr)
 276          {
 277   1          char status;
 278   1          unsigned int  unLen;
 279   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 280   1      
 281   1          ucComMF522Buf[0] = PICC_RESTORE;
 282   1          ucComMF522Buf[1] = sourceaddr;
 283   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 284   1       
 285   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 286   1      
 287   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 288   1          {   status = MI_ERR;   }
 289   1          
 290   1          if (status == MI_OK)
 291   1          {
 292   2              ucComMF522Buf[0] = 0;
 293   2              ucComMF522Buf[1] = 0;
 294   2              ucComMF522Buf[2] = 0;
 295   2              ucComMF522Buf[3] = 0;
 296   2              CalulateCRC(ucComMF522Buf,4,&ucComMF522Buf[4]);
 297   2       
 298   2              status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,6,ucComMF522Buf,&unLen);
 299   2              if (status != MI_ERR)
 300   2              {    status = MI_OK;    }
 301   2          }
 302   1          
 303   1          if (status != MI_OK)
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 6   

 304   1          {    return MI_ERR;   }
 305   1          
 306   1          ucComMF522Buf[0] = PICC_TRANSFER;
 307   1          ucComMF522Buf[1] = goaladdr;
 308   1      
 309   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 310   1       
 311   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 312   1      
 313   1          if ((status != MI_OK) || (unLen != 4) || ((ucComMF522Buf[0] & 0x0F) != 0x0A))
 314   1          {   status = MI_ERR;   }
 315   1      
 316   1          return status;
 317   1      }
 318          
 319          
 320          /////////////////////////////////////////////////////////////////////
 321          //功    能：命令卡片进入休眠状态
 322          //返    回: 成功返回MI_OK
 323          /////////////////////////////////////////////////////////////////////
 324          char PcdHalt(void)
 325          {
 326   1          char status;
 327   1          unsigned int  unLen;
 328   1          unsigned char ucComMF522Buf[MAXRLEN]; 
 329   1      
 330   1          ucComMF522Buf[0] = PICC_HALT;
 331   1          ucComMF522Buf[1] = 0;
 332   1          CalulateCRC(ucComMF522Buf,2,&ucComMF522Buf[2]);
 333   1       
 334   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,4,ucComMF522Buf,&unLen);
 335   1      
 336   1          return MI_OK;
 337   1      }
 338          
 339          /////////////////////////////////////////////////////////////////////
 340          //用MF522计算CRC16函数
 341          /////////////////////////////////////////////////////////////////////
 342          void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
 343          {
 344   1          unsigned char i,n;
 345   1          ClearBitMask(DivIrqReg,0x04);
 346   1          WriteRawRC(CommandReg,PCD_IDLE);
 347   1          SetBitMask(FIFOLevelReg,0x80);
 348   1          for (i=0; i<len; i++)
 349   1          {   WriteRawRC(FIFODataReg, *(pIndata+i));   }
 350   1          WriteRawRC(CommandReg, PCD_CALCCRC);
 351   1          i = 0xFF;
 352   1          do 
 353   1          {
 354   2              n = ReadRawRC(DivIrqReg);
 355   2              i--;
 356   2          }
 357   1          while ((i!=0) && !(n&0x04));
 358   1          pOutData[0] = ReadRawRC(CRCResultRegL);
 359   1          pOutData[1] = ReadRawRC(CRCResultRegM);
 360   1      }
 361          
 362          /////////////////////////////////////////////////////////////////////
 363          //功    能：复位RC522
 364          //返    回: 成功返回MI_OK
 365          /////////////////////////////////////////////////////////////////////
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 7   

 366          char PcdReset(void)    
 367          {
 368   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
 369   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
 370   1          WriteRawRC(TReloadRegL,30);           
 371   1          WriteRawRC(TReloadRegH,0);
 372   1          WriteRawRC(TModeReg,0x8D);
 373   1          WriteRawRC(TPrescalerReg,0x3E);
 374   1          WriteRawRC(TxAskReg,0x40);
 375   1          return MI_OK;
 376   1      }
 377          
 378          /////////////////////////////////////////////////////////////////////
 379          //功    能：读RC632寄存器
 380          //参数说明：Address[IN]:寄存器地址
 381          //返    回：读出的值
 382          /////////////////////////////////////////////////////////////////////
 383          unsigned char ReadRawRC(unsigned char Address)
 384          {
 385   1          unsigned char i, ucAddr;
 386   1          unsigned char ucResult=0;
 387   1      //      Sent_Byte(Address);
 388   1          MF522_NSS = 0;
 389   1              MF522_SCK = 1;
 390   1          delay_us(10);
 391   1          ucAddr = ((Address<<1)&0x7E)|0x80;
 392   1      
 393   1          for(i=8; i>0; i--)
 394   1          {
 395   2              MF522_SI = !((ucAddr&0x80)==0x80);
 396   2              delay_us(10);
 397   2              MF522_SCK = 0;
 398   2              delay_us(10);
 399   2              ucAddr <<= 1;
 400   2              MF522_SCK = 1;
 401   2              delay_us(10);
 402   2          }
 403   1      
 404   1          for(i=8; i>0; i--)
 405   1          {
 406   2              MF522_SCK = 0;
 407   2              delay_us(10);                                      
 408   2              ucResult <<= 1;
 409   2              ucResult|=(bit)MF522_SO;
 410   2              MF522_SCK = 1;
 411   2              delay_us(10);
 412   2          }
 413   1              if(Recvd_Count==1 && Rec_Buffer[0] == 0x40 && PcdReset_flag == 0x40){
 414   2                      Sent_Byte(0x40);Sent_Byte(Address);Sent_Byte(0x47);Sent_Byte(ucResult);
 415   2              }
 416   1          if(Recvd_Count==1 && Rec_Buffer[0] == 0x41 && PcdRequest_flag == 0x41){
 417   2                      Sent_Byte(0x41);Sent_Byte(Address);Sent_Byte(0x47);Sent_Byte(ucResult);
 418   2              }
 419   1              if(Recvd_Count==1 && Rec_Buffer[0] == 0x42 && PcdAntennaOn_flag == 0x42){
 420   2                      Sent_Byte(0x42);Sent_Byte(Address);Sent_Byte(0x47);Sent_Byte(ucResult);
 421   2              }
 422   1              if(Recvd_Count==1 && Rec_Buffer[0] == 0x43 && PcdAntennaOff_flag == 0x43){
 423   2                      Sent_Byte(0x43);Sent_Byte(Address);Sent_Byte(0x47);Sent_Byte(ucResult);
 424   2              }
 425   1              if(write_data_flag == 0x12){
 426   2                      Sent_Byte(0xfd);Sent_Byte(Address);Sent_Byte(0x47);Sent_Byte(ucResult);
 427   2              }
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 8   

 428   1              if(read_date_flag == 0x11){
 429   2                      Sent_Byte(0xfe);Sent_Byte(Address);Sent_Byte(0x47);Sent_Byte(ucResult);
 430   2              }
 431   1          MF522_NSS = 1;
 432   1              delay_us(10);
 433   1          MF522_SCK = 0;
 434   1          delay_us(10);
 435   1          return ucResult;
 436   1      }
 437          
 438          /////////////////////////////////////////////////////////////////////
 439          //功    能：写RC632寄存器
 440          //参数说明：Address[IN]:寄存器地址
 441          //          value[IN]:写入的值
 442          /////////////////////////////////////////////////////////////////////
 443          void WriteRawRC(unsigned char Address, unsigned char value)
 444          {
 445   1          unsigned char i, ucAddr;   
 446   1              //向串口发送写的数据
 447   1          MF522_NSS = 0;
 448   1              MF522_SCK = 1;
 449   1          delay_us(10);
 450   1              if(Recvd_Count==1 && Rec_Buffer[0] == 0x40 && PcdReset_flag == 0x40){
 451   2                      Sent_Byte(0x40);Sent_Byte(Address);Sent_Byte(0x48);Sent_Byte(value);
 452   2              }
 453   1          if(Recvd_Count==1 && Rec_Buffer[0] == 0x41 && PcdRequest_flag == 0x41){
 454   2                      Sent_Byte(0x41);Sent_Byte(Address);Sent_Byte(0x48);Sent_Byte(value);
 455   2              }
 456   1              if(Recvd_Count==1 && Rec_Buffer[0] == 0x42 && PcdAntennaOn_flag == 0x42){
 457   2                      Sent_Byte(0x42);Sent_Byte(Address);Sent_Byte(0x48);Sent_Byte(value);
 458   2              }
 459   1              if(Recvd_Count==1 && Rec_Buffer[0] == 0x43 && PcdAntennaOff_flag == 0x43){
 460   2                      Sent_Byte(0x43);Sent_Byte(Address);Sent_Byte(0x48);Sent_Byte(value);
 461   2              }
 462   1              if(write_data_flag == 0x12){
 463   2                      Sent_Byte(0xfd);Sent_Byte(Address);Sent_Byte(0x48);Sent_Byte(value);
 464   2              }
 465   1              if(read_date_flag == 0x11){
 466   2                      Sent_Byte(0xfe);Sent_Byte(Address);Sent_Byte(0x48);Sent_Byte(value);
 467   2              }
 468   1          ucAddr = ((Address<<1)&0x7E);
 469   1      
 470   1          for(i=8; i>0; i--)
 471   1          {
 472   2              MF522_SI = !((ucAddr&0x80)==0x80);
 473   2              delay_us(10);
 474   2              MF522_SCK = 0;
 475   2              delay_us(10);
 476   2              ucAddr <<= 1;
 477   2              MF522_SCK = 1;
 478   2              delay_us(10);
 479   2          }
 480   1          for(i=8; i>0; i--)
 481   1          {
 482   2              MF522_SI = !((value&0x80)==0x80);
 483   2              delay_us(10);
 484   2              MF522_SCK = 0;
 485   2              delay_us(10);
 486   2              value <<= 1;
 487   2              MF522_SCK = 1;
 488   2              delay_us(10);
 489   2          }
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 9   

 490   1          MF522_NSS = 1;
 491   1              delay_us(10);
 492   1          MF522_SCK = 0;
 493   1          delay_us(10);
 494   1      }
 495          
 496          
 497          /////////////////////////////////////////////////////////////////////
 498          //功    能：置RC522寄存器位
 499          //参数说明：reg[IN]:寄存器地址
 500          //          mask[IN]:置位值       
 501          /////////////////////////////////////////////////////////////////////
 502          void SetBitMask(unsigned char reg,unsigned char mask)  
 503          {
 504   1          char tmp = 0x0;
 505   1          tmp = ReadRawRC(reg);
 506   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 507   1      }
 508          
 509          /////////////////////////////////////////////////////////////////////
 510          //功    能：清RC522寄存器位
 511          //参数说明：reg[IN]:寄存器地址
 512          //          mask[IN]:清位值
 513          /////////////////////////////////////////////////////////////////////
 514          void ClearBitMask(unsigned char reg,unsigned char mask)  
 515          {
 516   1          char tmp = 0x0;
 517   1          tmp = ReadRawRC(reg);
 518   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 519   1      } 
 520          
 521          /////////////////////////////////////////////////////////////////////
 522          //功    能：通过RC522和ISO14443卡通讯
 523          //参数说明：Command[IN]:RC522命令字
 524          //          pInData[IN]:通过RC522发送到卡片的数据
 525          //          InLenByte[IN]:发送数据的字节长度
 526          //          pOutData[OUT]:接收到的卡片返回数据
 527          //          *pOutLenBit[OUT]:返回数据的位长度
 528          /////////////////////////////////////////////////////////////////////
 529          char PcdComMF522(unsigned char Command, 
 530                           unsigned char *pInData, 
 531                           unsigned char InLenByte,
 532                           unsigned char *pOutData, 
 533                           unsigned int  *pOutLenBit)
 534          {
 535   1          char status = MI_ERR;
 536   1          unsigned char irqEn   = 0x00;
 537   1          unsigned char waitFor = 0x00;
 538   1          unsigned char lastBits;
 539   1          unsigned char n;
 540   1          unsigned int i;
 541   1          switch (Command)
 542   1          {
 543   2             case PCD_AUTHENT:
 544   2                irqEn   = 0x12;
 545   2                waitFor = 0x10;
 546   2                break;
 547   2             case PCD_TRANSCEIVE:
 548   2                irqEn   = 0x77;
 549   2                waitFor = 0x30;
 550   2                break;
 551   2             default:
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 10  

 552   2               break;
 553   2          }
 554   1         
 555   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 556   1          ClearBitMask(ComIrqReg,0x80);
 557   1          WriteRawRC(CommandReg,PCD_IDLE);
 558   1          SetBitMask(FIFOLevelReg,0x80);
 559   1          for (i=0; i<InLenByte; i++)
 560   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 561   1          WriteRawRC(CommandReg, Command);
 562   1          if (Command == PCD_TRANSCEIVE)
 563   1          {    SetBitMask(BitFramingReg,0x80);  }
 564   1          i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 565   1          do 
 566   1          {
 567   2               n = ReadRawRC(ComIrqReg);
 568   2               i--;
 569   2          }
 570   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 571   1          ClearBitMask(BitFramingReg,0x80);      
 572   1          if (i!=0){    
 573   2                      if(!(ReadRawRC(ErrorReg)&0x1B)){
 574   3                              status = MI_OK;
 575   3                              if (n & irqEn & 0x01)
 576   3                              {   status = MI_NOTAGERR;   }
 577   3                              if (Command == PCD_TRANSCEIVE){
 578   4                                      n = ReadRawRC(FIFOLevelReg);
 579   4                                      lastBits = ReadRawRC(ControlReg) & 0x07;
 580   4                                  if (lastBits){   *pOutLenBit = (n-1)*8 + lastBits;   }
 581   4                                  else {   *pOutLenBit = n*8;   }
 582   4                                  if (n == 0){   n = 1;    }
 583   4                                  if (n > MAXRLEN){   n = MAXRLEN;   }
 584   4                                  for (i=0; i<n; i++){   pOutData[i] = ReadRawRC(FIFODataReg);    }
 585   4                              }
 586   3                      }
 587   2                      else
 588   2                      {   status = MI_ERR;   }    
 589   2         }
 590   1         SetBitMask(ControlReg,0x80);           // stop timer now
 591   1         WriteRawRC(CommandReg,PCD_IDLE); 
 592   1         return status;
 593   1      }
 594          /////////////////////////////////////////////////////////////////////
 595          //开启天线  
 596          //每次启动或关闭天险发射之间应至少有1ms的间隔
 597          /////////////////////////////////////////////////////////////////////
 598          void PcdAntennaOn()
 599          {
 600   1          unsigned char i;
 601   1          i = ReadRawRC(TxControlReg);
 602   1          if (!(i & 0x03))
 603   1          {
 604   2              SetBitMask(TxControlReg, 0x03);
 605   2          }
 606   1      }
 607          /////////////////////////////////////////////////////////////////////
 608          //关闭天线
 609          /////////////////////////////////////////////////////////////////////
 610          void PcdAntennaOff()
 611          {
 612   1          ClearBitMask(TxControlReg, 0x03);
 613   1      }
C51 COMPILER V9.01   RC522                                                                 11/20/2017 03:21:58 PAGE 11  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3250    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     246
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
