C51 COMPILER V9.51   TEMP_LIGHT                                                            04/24/2019 14:48:17 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TEMP_LIGHT
OBJECT MODULE PLACED IN temp_light.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE temp_light.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /**********************
   2          STC-B_DEMO.c for 温度光照测量工程
   3          型号:STC15F2K60S2 主频:11.0592MHz
   4          ************************/
   5          #include <STC15F2K60S2.H>
   6          #define ulint unsigned long
   7          #define uint  unsigned int
   8          #define uchar unsigned char
   9          
  10          /*---------宏定义---------*/
  11          #define cstDigBegin   0         // 数码管显示位选起始,用户可修改
  12          #define cstDigEnd     20        // 数码管显示位选终止位。8为发光二极管,大于8 可用于调节显示量度
  13          
  14          #define cstDig0       ucDigtmp0 //数码管各位上显示内容数组序号,用户可修改
  15          #define cstDig1       ucDigtmp1 //11代表段选无显示  
  16          #define cstDig2       ucDigtmp2
  17          #define cstDig3       ucDigtmp3
  18          #define cstDig4       ucDigtmp4
  19          #define cstDig5       ucDigtmp5
  20          #define cstDig6       ucDigtmp6
  21          #define cstDig7       ucDigtmp7
  22          #define cstDig8       ucDigtmp8 //流水灯
  23          
  24          #define cstClockXmsMaxNum 40 //Xms时钟
  25          #define cstSampleNum 4000  //取多次值求平均值减小误差
  26          
  27          /*---------函数声明---------*/
  28          void InitADC();        //初始化ADC切换
  29          void InitAdcTherm();   //初始化温度ADC
  30          void InitAdcPhoto();  //初始化光ADC
  31          void ADC_Process();    //ADC中断服务处理
  32          void Date_ThermToDigit();  //分别取出温度的百位、十位、个位
  33          void Date_PhotoToDigit();  //分别取出光照的百位、十位、个位
  34          
  35          void Init();                  //Initial
  36          void T10us_Process();         //Function for 10us
  37          void T100us_Process();        //Function for 100us
  38          void T1ms_Process();          //Function for 1ms
  39          void T10ms_Process();         //Function for 10ms
  40          void T100ms_Process();        //Function for 100ms
  41          void TXms_Process();          //Function for Xms,用户可修改
  42          
  43          void Seg7LedDisplay( uchar s, uchar e );  //显示单个数码管或流水灯
  44          void Seg7LedUpdate();                //将显示的数据更新
  45          
  46          /*---------变量定义---------*/
  47          //定时器计数时间标志
  48          bit btT10usFlag = 0;      //时基10uS
  49          bit btT100usFlag = 0;     //50个＝5ms单相通电时间
  50          bit btT1msFlag = 0;       //数码管扫描频率节拍
  51          bit btT10msFlag = 0;      //按键消抖节拍
  52          bit btT100msFlag = 0;     //数码管显示数据更新
  53          bit btTXmsFlag = 0;       //4ms温度光照采样切换模式
  54          
  55          //定时器内部专用时间计数
C51 COMPILER V9.51   TEMP_LIGHT                                                            04/24/2019 14:48:17 PAGE 2   

  56          uchar ucT10usCnt = 0;    //时基10uS
  57          uchar ucT100usCnt = 0;   //原代码里设想的是5ms 单相通电时间
  58          uchar ucT1msCnt = 0;
  59          uchar ucT10msCnt = 0;
  60          uchar ucT100msCnt = 0;
  61          
  62          uchar ucClockXms = 0;     //Xms(本例是计40*100us)
  63          uchar ucLedTmp = 0x00;    //流水灯显示值
  64          
  65          uchar ucDigtmp0 = 0;
  66          uchar ucDigtmp1 = 0;
  67          uchar ucDigtmp2 = 0;
  68          uchar ucDigtmp3 = 0;
  69          uchar ucDigtmp4 = 0;
  70          uchar ucDigtmp5 = 0;
  71          uchar ucDigtmp6 = 0;
  72          uchar ucDigtmp7 = 0;
  73          uchar ucDigtmp8 = 0;
  74          
  75          uint uiSampleNum = 0;
  76          uint uiState = 1;                      //状态位，区分光和温度
  77          
  78          uint uiPhoto = 0;                     //执行光的次数
  79          uint uiTherm = 0;                     //执行温度的次数
  80          ulint ulAdSumPhoto = 0;               //光AD值得总和
  81          ulint ulAdSumTherm = 0;              //温度AD值的总和
  82          
  83          uint uiThermTmp;
  84          int intThermLookUp = 0;              //温度值
  85          uint uiThermAbs;                    //温度绝对值
  86          uint uiPhotoTmp = 0;                 //光
  87          
  88          //设置用于显示温度的三个变量
  89          uint uiThermDig100 = 0;     //百位
  90          uint uiThermDig10 = 0;      //十位
  91          uint uiThermDig1 = 0;       //个位
  92          
  93          //设置用于显示光的三个变量
  94          uint uiPhotoDig100 = 0;    //百位
  95          uint uiPhotoDig10 = 0;     //十位
  96          uint uiPhotoDig1 = 0;      //个位
  97          
  98          //数码管上显示0-F
  99          char arrSegSelect[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07,
 100                                 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71
 101                                };
 102          //温度值对应表
 103          int code arrThermLUT[] = {239, 197, 175, 160, 150, 142, 135, 129, 124, 120, 116, 113, 109, 107, 104, 101,
 104                                    99, 97, 95, 93, 91, 90, 88, 86, 85, 84, 82, 81, 80, 78, 77, 76,
 105                                    75, 74, 73, 72, 71, 70, 69, 68, 67, 67, 66, 65, 64, 63, 63, 62,
 106                                    61, 61, 60, 59, 58, 58, 57, 57, 56, 55, 55, 54, 54, 53, 52, 52,
 107                                    51, 51, 50, 50, 49, 49, 48, 48, 47, 47, 46, 46, 45, 45, 44, 44,
 108                                    43, 43, 42, 42, 41, 41, 41, 40, 40, 39, 39, 38, 38, 38, 37, 37,
 109                                    36, 36, 36, 35, 35, 34, 34, 34, 33, 33, 32, 32, 32, 31, 31, 31,
 110                                    30, 30, 29, 29, 29, 28, 28, 28, 27, 27, 27, 26, 26, 26, 25, 25,
 111                                    24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19,
 112                                    19, 19, 18, 18, 18, 17, 17, 16, 16, 16, 15, 15, 15, 14, 14, 14,
 113                                    13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 9, 9, 9, 8, 8, 8, 7,
 114                                    7, 7, 6, 6, 5, 5, 54, 4, 3, 3, 3, 2, 2, 1, 1, 1, 0, 0, -1, -1, -1,
 115                                    -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -8, -8, -9, -9,
 116                                    -10, -10, -11, -11, -12, -13, -13, -14, -14, -15, -16, -16, -17,
 117                                    -18, -19, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29,
C51 COMPILER V9.51   TEMP_LIGHT                                                            04/24/2019 14:48:17 PAGE 3   

 118                                    -30, -32, -33, -35, -36, -38, -40, -43, -46, -50, -55, -63, 361
 119                                   };
 120          
 121          /*---------主函数---------*/
 122          void main()
 123          {
 124   1          Init();
 125   1          ucLedTmp = 0x00;            //流水灯显示值
 126   1          while( 1 )
 127   1          {
 128   2              if( btT10usFlag )
 129   2              {
 130   3                  btT10usFlag = 0;  T10us_Process();
 131   3              }
 132   2              if( btT100usFlag )
 133   2              {
 134   3                  btT100usFlag = 0;  T100us_Process();
 135   3              }
 136   2              if( btT1msFlag )
 137   2              {
 138   3                  btT1msFlag = 0;   T1ms_Process();
 139   3              }
 140   2              if( btT10msFlag )
 141   2              {
 142   3                  btT10msFlag = 0;  T10ms_Process();
 143   3              }
 144   2              if( btT100msFlag )
 145   2              {
 146   3                  btT100msFlag = 0;  T100ms_Process();
 147   3              }
 148   2              if( btTXmsFlag  )    //Xms标志位有效代表4ms到了
 149   2              {
 150   3                  btTXmsFlag = 0;   TXms_Process();
 151   3              }
 152   2          }
 153   1      }
 154          
 155          /*---------T0定时器中断服务处理函数--------*/
 156          void T0_Process() interrupt 1
 157          {
 158   1          btT10usFlag = 1;
 159   1          ucT10usCnt++;
 160   1          if( ucT10usCnt == 10 )
 161   1          {
 162   2              ucT10usCnt = 0;  btT100usFlag = 1;  ucT100usCnt++;
 163   2          }
 164   1          if( ucT100usCnt == 10 )
 165   1          {
 166   2              ucT100usCnt = 0;  btT1msFlag = 1;  ucT1msCnt++;
 167   2          }
 168   1          if( ucT1msCnt == 10 )
 169   1          {
 170   2              ucT1msCnt = 0;   btT10msFlag = 1;  ucT10msCnt++;
 171   2          }
 172   1          if( ucT10msCnt == 10 )
 173   1          {
 174   2              ucT10msCnt = 0;  btT100msFlag = 1;
 175   2          }
 176   1      }
 177          /*---------初始化函数--------*/
 178          void Init()
 179          {
C51 COMPILER V9.51   TEMP_LIGHT                                                            04/24/2019 14:48:17 PAGE 4   

 180   1          //Hardware Init
 181   1          P0M1 = 0x00;                 //设置P0为推挽模式，点亮数码管
 182   1          P0M0 = 0xff;
 183   1          P2M1 = 0x00;
 184   1          P2M0 = 0x08;                 //将P2^3设置为推挽模式，其余为准双向口模式
 185   1      
 186   1          //Interrupt Init
 187   1          /*10微秒@11.0592MHz 16可重载  定时器0     不修改
 188   1            ISP软件生成，原来是1ms在11.592MHz 12T模式 */
 189   1          AUXR |= 0x80;   //定时器时钟1T模式
 190   1          TMOD &= 0xF0;   //设置定时器模式
 191   1          TL0 = 0x91;     //设置定时初值
 192   1          TH0 = 0xFF;     //设置定时初值
 193   1          EA = 1;         //打开总的中断
 194   1          ET0 = 1;        //开启定时器中断
 195   1          TF0 = 0;        //清除TF0标志
 196   1          TR0 = 1;        //启动定时器
 197   1      }
 198          
 199          /*---------各时钟节拍处理函数--------*/
 200          void T10us_Process()
 201          {
 202   1      }
 203          void T100us_Process()
 204          {
 205   1          ucClockXms++;
 206   1          if ( ucClockXms == ( cstClockXmsMaxNum ) )
 207   1          {
 208   2              ucClockXms = 0;  btTXmsFlag = 1;
 209   2          }
 210   1      }
 211          void T1ms_Process()             //1ms适用数码管扫描服务
 212          {
 213   1          Seg7LedDisplay( cstDigBegin, cstDigEnd );
 214   1      }
 215          void T10ms_Process()           //10ms适用按键扫描服务
 216          {
 217   1      }
 218          void TXms_Process()             //Xms服务,可修改
 219          {
 220   1          InitADC();
 221   1      }
 222          void T100ms_Process()          //100ms适用数据显示更新
 223          {
 224   1          Seg7LedUpdate();
 225   1      }
 226          
 227          /*---------数码管与发光二极管显示函数--------*/
 228          void Seg7LedDisplay( uchar s, uchar  e )
 229          {
 230   1          unsigned char arrSegSelect[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x40, 0x00
             -}; //  数码管显示译码表
 231   1          /* 序号:   0    1    2    3     4    5    6      7     8     9     10   11          */
 232   1          /* 显示:   0    1    2    3     4    5    6      7     8     9     -   (无)      */
 233   1          static  int  i;
 234   1        P0 = 0x00;
 235   1          P2 = ( P2 & 0xf0 ) | i;
 236   1          switch( i )
 237   1          {
 238   2              case 0:
 239   2                  P0 = arrSegSelect[cstDig0];   break;
 240   2              case 1:
C51 COMPILER V9.51   TEMP_LIGHT                                                            04/24/2019 14:48:17 PAGE 5   

 241   2                  P0 = arrSegSelect[cstDig1];   break;
 242   2              case 2:
 243   2                  P0 = arrSegSelect[cstDig2];   break;
 244   2              case 3:
 245   2                  P0 = arrSegSelect[cstDig3];   break;
 246   2              case 4:
 247   2                  P0 = arrSegSelect[cstDig4];   break;
 248   2              case 5:
 249   2                  P0 = arrSegSelect[cstDig5];   break;
 250   2              case 6:
 251   2                  P0 = arrSegSelect[cstDig6];   break;
 252   2              case 7:
 253   2                  P0 = arrSegSelect[cstDig7];   break;
 254   2              case 8:
 255   2                  P0 = cstDig8;   break;
 256   2              default:
 257   2                  P0 = 0x00;     break;
 258   2          }
 259   1          if( ++i > e ) i = s;
 260   1      }
 261          
 262          /*---------数码管及流水灯上的显示数据更新函数--------*/
 263          void Seg7LedUpdate()
 264          {
 265   1          if ( intThermLookUp < 0 )
 266   1              ucDigtmp0 = 10;
 267   1          else
 268   1              ucDigtmp0 = uiThermDig100; //数码管各位上显示内容数组序号,用户可修改
 269   1          ucDigtmp1 = uiThermDig10;      //11代表段选无显示
 270   1          ucDigtmp2 = uiThermDig1;
 271   1          ucDigtmp3 = 11;
 272   1          ucDigtmp4 = 11;
 273   1          ucDigtmp5 = uiPhotoDig100;
 274   1          ucDigtmp6 = uiPhotoDig10;
 275   1          ucDigtmp7 = uiPhotoDig1;
 276   1          ucDigtmp8 = ucLedTmp;       //流水灯
 277   1      }
 278          
 279          /*---------初始化ADC函数--------*/
 280          void InitADC()
 281          {
 282   1          if( uiState == 1 )
 283   1          {
 284   2              InitAdcPhoto();        //初始化光
 285   2          }
 286   1          else
 287   1          {
 288   2              InitAdcTherm();         //初始化温度
 289   2          }
 290   1          uiState = -uiState;
 291   1      }
 292          void InitAdcTherm()             //初始化温度ADC
 293          {
 294   1          P1ASF = 0xff;               //将P1口作为模拟功能A/D使用
 295   1          ADC_RES = 0;               //寄存器ADC_RES和ADC_RESL保存A/D转化结果
 296   1          ADC_RESL = 0;              //初始赋值0
 297   1          ADC_CONTR = 0x8b;         //选择P1^3作为A/D输入使用
 298   1          CLK_DIV = 0x20;             //ADRJ=1存放10位ADC结果
 299   1      }
 300          void InitAdcPhoto()              //初始化光ADC
 301          {
 302   1          P1ASF = 0xff;
C51 COMPILER V9.51   TEMP_LIGHT                                                            04/24/2019 14:48:17 PAGE 6   

 303   1          ADC_RES = 0;
 304   1          ADC_RESL = 0;
 305   1          ADC_CONTR = 0x8c;           //CHS=100选择P1^4作为A/D输入使用
 306   1          CLK_DIV = 0x20;
 307   1          EADC = 1;
 308   1      }
 309          
 310          /*---------ADC中断子函数--------*/
 311          void ADC_Process() interrupt 5 using 1
 312          {
 313   1          uiSampleNum++;
 314   1          EA = 0;                          //关闭中断    
 315   1          if( uiSampleNum > cstSampleNum )  //取多次值求平均值减小误差
 316   1          {
 317   2              if( uiState == 1 )              //此时uiState=1执行温度部分
 318   2              {
 319   3                  uiThermTmp = ( ulAdSumTherm + uiTherm / 2 ) / uiTherm; //四舍五入
 320   3                  intThermLookUp = arrThermLUT[uiThermTmp - 1]; //查找表中AD的温度值
 321   3                  ulAdSumTherm = 0;
 322   3                  uiTherm = 0;
 323   3                  uiSampleNum = 0;
 324   3                  Date_ThermToDigit();
 325   3              }
 326   2              if( uiState == -1 )             //此时uiState=-1执行光部分
 327   2              {
 328   3                  uiPhotoTmp = ( ulAdSumPhoto + uiPhoto / 2 ) / uiPhoto;  //四舍五入
 329   3                  ulAdSumPhoto = 0;
 330   3                  uiPhoto = 0;
 331   3                  uiSampleNum = 0;
 332   3                  Date_PhotoToDigit();
 333   3              }
 334   2          }
 335   1      
 336   1          if( uiState == 1 )
 337   1          {
 338   2              //对应温度的数据处理
 339   2              uiTherm++;
 340   2              uiThermTmp = ( ADC_RES * 256 + ADC_RESL ) / 4; //10位AD值转换为8位AD值
 341   2              ulAdSumTherm += uiThermTmp;              //AD值的和
 342   2          }
 343   1          if( uiState == -1 )
 344   1          {
 345   2              //处理光部分的数据
 346   2              uiPhoto++;
 347   2              ulAdSumPhoto += ADC_RES * 256 + ADC_RESL; // AD值的和
 348   2          }
 349   1          ADC_CONTR &= ~0X10;                  //转换完成后，ADC_FLAG清零
 350   1          ADC_CONTR |= 0X08;                   //转换完成后，ADC_START赋1
 351   1          EA = 1;
 352   1          EADC = 1; //打开中断
 353   1      }
 354          
 355          /*---------数据转换子函数--------*/
 356          //分别取出温度和光照的百位、十位、个位
 357          void Date_ThermToDigit()
 358          {
 359   1          if( intThermLookUp < 0 )
 360   1              uiThermAbs = -intThermLookUp;
 361   1          else
 362   1              uiThermAbs = intThermLookUp;
 363   1          uiThermDig100 = uiThermAbs % 1000 / 100;
 364   1          uiThermDig10 = uiThermAbs % 100 / 10;
C51 COMPILER V9.51   TEMP_LIGHT                                                            04/24/2019 14:48:17 PAGE 7   

 365   1          uiThermDig1 = uiThermAbs % 10;
 366   1      }
 367          void Date_PhotoToDigit()
 368          {
 369   1          uiPhotoDig100 = uiPhotoTmp % 1000 / 100;
 370   1          uiPhotoDig10 = uiPhotoTmp % 100 / 10;
 371   1          uiPhotoDig1 = uiPhotoTmp % 10;
 372   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    993    ----
   CONSTANT SIZE    =    520    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     70      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
